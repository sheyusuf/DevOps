Description: >
    Shehu Yusuf / Udacity 2023
    this is my webserver

Parameters:

    EnvironmentName:
      Description: An environment name that will be prefixed to resource names
      Type: String

Resources:
    LBSecGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow http to our load balancer
        VpcId:
          Fn::ImportValue:
            !Sub "${EnvironmentName}-VPCID"
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

    WebServerSecGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow http to our hosts and SSH from local only
        VpcId:
          Fn::ImportValue:
            !Sub "${EnvironmentName}-VPCID"
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

    WebAppLaunchConfig:
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
            apt update -y
            apt install -y apache2
            systemctl start apache2
            systemctl enable apache2
            rm ../../var/www/html/index.html
            wget -P ../../var/www/html https://s3.us-east-2.amazonaws.com/test-udagram-1/index.html         
        # ToDo: AMI ID of Ubuntu Linux machine. Too get one, try creating a VM from the web console. 
        ImageId: ami-0ac73f33a1888c64a
        # ToDo: Change the key-pair name, as applicable to you. 
        SecurityGroups:
        - Ref: WebServerSecGroup
        InstanceType: t3.small
        BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'

    WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
          VPCZoneIdentifier:
          - Fn::ImportValue: 
              !Sub "${EnvironmentName}-PRIV-NETS"
          LaunchConfigurationName:
            Ref: WebAppLaunchConfig
          MinSize: '4'
          MaxSize: '6'
          TargetGroupARNs:
          - Ref: WebAppTargetGroup

    WebAppLB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
          Subnets:
          - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
          - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
          SecurityGroups:
          - Ref: LBSecGroup

    Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
          DefaultActions:
          - Type: forward
            TargetGroupArn:
              Ref: WebAppTargetGroup
          LoadBalancerArn:
            Ref: WebAppLB
          Port: '80'
          Protocol: HTTP

    ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
          Actions:
          - Type: forward
            TargetGroupArn: !Ref 'WebAppTargetGroup'
          Conditions:
          - Field: path-pattern
            Values: [/]
          ListenerArn: !Ref 'Listener'
          Priority: 1

    WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
          HealthCheckIntervalSeconds: 10
          HealthCheckPath: /
          HealthCheckProtocol: HTTP
          HealthCheckTimeoutSeconds: 8
          HealthyThresholdCount: 2
          Port: 80
          Protocol: HTTP
          UnhealthyThresholdCount: 5
          VpcId: 
            Fn::ImportValue:
              Fn::Sub: "${EnvironmentName}-VPCID"


Outputs:           
    LBDNS:
      Description: The website URL
      Value:
        !Sub
          - 'http://${DNSName}'
          - {DNSName: !GetAtt 'WebAppLB.DNSName'}
      Export:
        Name: !Sub "${EnvironmentName}-LBURL" 

    webappLB:
      Description: The LoadBalancer for my webapp
      Value: !Ref WebAppLB
      Export:
        Name: !Sub ${EnvironmentName}-webappLB

    LB:
      Description: The LoadBalancer for my webapp
      Value: !Ref LBSecGroup
      Export:
        Name: !Sub ${EnvironmentName}-LB

    TargetGroup:
      Description: target group for my webapp
      Value: !Ref WebAppTargetGroup
      Export:
        Name: !Sub ${EnvironmentName}-TG

    AutoscalingGroup:
      Description: the autoscaling group for my webapp
      Value: !Ref WebAppGroup
      Export:
        Name: !Sub ${EnvironmentName}-Autoscallig
        
